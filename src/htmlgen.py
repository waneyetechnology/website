from datetime import datetime
from .log import logger
import random

def generate_html(news, policies, econ, forex):
    now = datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')

    # Generate random colors for headlines
    def random_color():
        return f"#{random.randint(0, 0xFFFFFF):06x}"

    headline_colors1 = [random_color() for _ in news]
    headline_colors2 = [random_color() for _ in news]

    html = f"""
<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <title>Waneye Financial Dashboard</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='icon' type='image/svg+xml' href='/favicon.svg'>
    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css'>
    <link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/jellythemes/jelly-bootstrap@main/dist/jelly-bootstrap.min.css'>
    <style>
        body{{background:#eaf6ff;}}
        #bg-canvas {{
            position: fixed;
            top: 0; left: 0; width: 100vw; height: 100vh;
            z-index: 0;
            display: block;
        }}
        .container, .container * {{ position: relative; z-index: 1; }}
        h1.display-4 {{ color: #0a192f; text-shadow: 0 2px 8px #fff, 0 1px 0 #b3d1e6; }}
        .list-group-item a {{ text-decoration: none !important; }}
        .headline-bullet {{
            display: inline-block;
            width: 1.1em;
            height: 1.1em;
            margin-right: 0.5em;
            border-radius: 50%;
            background: linear-gradient(135deg, #0074d9 60%, #ffdc00 100%);
            box-shadow: 0 1px 4px #0074d955;
            vertical-align: middle;
        }}
    </style>
</head>
<body>
    <canvas id='bg-canvas'></canvas>
    <div class='container my-5'>
        <div class='text-center mb-4'>
            <h1 class='display-4 fw-bold'>Waneye Financial World Overview</h1>
            <p class='text-muted'><em>Last updated: {now}</em></p>
        </div>
        <div class='row g-4'>
            <div class='col-md-6'>
                <div class='card shadow-sm'>
                    <div class='card-header bg-primary text-white'>Top Financial Headlines</div>
                    <ul class='list-group list-group-flush'>
                        {''.join([f"<li class='list-group-item'><span class='headline-bullet' style='background:linear-gradient(135deg, {color1} 60%, {color2} 100%);box-shadow:0 1px 4px {color1}55;'></span><a href='{item['url']}' target='_blank'>{item['headline']}</a></li>" for item, color1, color2 in zip(news, headline_colors1, headline_colors2)])}
                    </ul>
                </div>
            </div>
            <div class='col-md-6'>
                <div class='card shadow-sm'>
                    <div class='card-header bg-info text-white'>Central Bank Policies</div>
                    <ul class='list-group list-group-flush'>
                        {''.join([f"<li class='list-group-item'><b>{item['bank']}:</b> {item['policy']}</li>" for item in policies])}
                    </ul>
                </div>
            </div>
        </div>
        <div class='row g-4 mt-2'>
            <div class='col-md-6'>
                <div class='card shadow-sm'>
                    <div class='card-header bg-success text-white'>Key Economic Data</div>
                    <ul class='list-group list-group-flush'>
                        {''.join([f"<li class='list-group-item'>{item['event']}: {item['value']} ({item['date']})</li>" for item in econ])}
                    </ul>
                </div>
            </div>
            <div class='col-md-6'>
                <div class='card shadow-sm'>
                    <div class='card-header bg-warning text-dark'>Forex CFD Quotes</div>
                    <div class='table-responsive'>
                        <table class='table table-bordered mb-0'>
                            <thead class='table-light'><tr><th>Pair</th><th>Bid</th><th>Ask</th></tr></thead>
                            <tbody>
                                {''.join([f"<tr><td>{item['pair']}</td><td>{item['bid']}</td><td>{item['ask']}</td></tr>" for item in forex])}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <footer class='text-center mt-5 text-muted'>
            <hr>
            <small>Generated by Waneye.com &mdash; Powered by JellyThemes</small>
        </footer>
    </div>
    <script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js'></script>
    <script>
    // Financial animation: candlesticks, moving average, Bollinger Bands, volume, MACD
    const canvas = document.getElementById('bg-canvas');
    const ctx = canvas.getContext('2d');
    function resize() {{
        const dpr = window.devicePixelRatio || 1;
        canvas.width = window.innerWidth * dpr;
        canvas.height = window.innerHeight * dpr;
        canvas.style.width = window.innerWidth + 'px';
        canvas.style.height = window.innerHeight + 'px';
        ctx.setTransform(1, 0, 0, 1, 0, 0); // reset
        ctx.scale(dpr, dpr);
    }}
    window.addEventListener('resize', resize);
    resize();
    // Chart parameters
    const W = () => window.innerWidth;
    const H = () => window.innerHeight;
    // --- MAKE ANIMATION MORE OBVIOUS ---
    // Thicker candles, brighter colors, more shadow, and a subtle animated glow
    function drawCandles() {{
        let w = 24; // thicker
        let gap = 10;
        let x0 = 40;
        for (let i=0; i<candles.length; ++i) {{
            let c = candles[i];
            let x = x0 + i*(w+gap);
            // Candle shadow
            ctx.save();
            ctx.shadowColor = c.close > c.open ? '#2ecc40' : '#ff4136';
            ctx.shadowBlur = 16;
            ctx.strokeStyle = '#222';
            ctx.beginPath();
            ctx.moveTo(x+w/2, c.high);
            ctx.lineTo(x+w/2, c.low);
            ctx.stroke();
            ctx.restore();
            // Candle body
            ctx.save();
            ctx.lineWidth = 10;
            ctx.strokeStyle = c.close > c.open ? '#2ecc40' : '#ff4136';
            ctx.shadowColor = c.close > c.open ? '#2ecc40' : '#ff4136';
            ctx.shadowBlur = 24 + 8*Math.abs(Math.sin(Date.now()/400)); // animated glow
            ctx.beginPath();
            ctx.moveTo(x+w/2, c.open);
            ctx.lineTo(x+w/2, c.close);
            ctx.stroke();
            ctx.restore();
        }}
    }}
    // Make moving average and Bollinger bands more visible
    function drawMA(ma, color) {{
        ctx.save();
        ctx.beginPath();
        let w = 24, gap = 10, x0 = 40;
        for (let i=0; i<ma.length; ++i) {{
            let x = x0 + i*(w+gap) + w/2;
            if (ma[i]!==null) ctx.lineTo(x, ma[i]);
        }}
        ctx.strokeStyle = color;
        ctx.lineWidth = 4;
        ctx.globalAlpha = 0.85;
        ctx.shadowColor = color;
        ctx.shadowBlur = 12;
        ctx.stroke();
        ctx.globalAlpha = 1;
        ctx.restore();
    }}
    function drawBollinger(boll, colorU, colorL) {{
        ctx.save();
        ctx.beginPath();
        let w = 24, gap = 10, x0 = 40;
        for (let i=0; i<boll.upper.length; ++i) {{
            let x = x0 + i*(w+gap) + w/2;
            if (boll.upper[i]!==null) ctx.lineTo(x, boll.upper[i]);
        }}
        ctx.strokeStyle = colorU;
        ctx.lineWidth = 3;
        ctx.setLineDash([8,6]);
        ctx.shadowColor = colorU;
        ctx.shadowBlur = 10;
        ctx.stroke();
        ctx.setLineDash([]);
        ctx.beginPath();
        for (let i=0; i<boll.lower.length; ++i) {{
            let x = x0 + i*(w+gap) + w/2;
            if (boll.lower[i]!==null) ctx.lineTo(x, boll.lower[i]);
        }}
        ctx.strokeStyle = colorL;
        ctx.shadowColor = colorL;
        ctx.shadowBlur = 10;
        ctx.stroke();
        ctx.restore();
    }}
    // --- END MORE OBVIOUS ---
    // Only recalculate indicators when new data is added
    // Use requestAnimationFrame only if tab is visible
    let lastFrame = 0;
    let pageVisible = true;
    document.addEventListener('visibilitychange', function() {{
        pageVisible = !document.hidden;
    }});
    function animate(now) {{
        if (!pageVisible) {{ requestAnimationFrame(animate); return; }}
        if (!lastFrame || now - lastFrame > FRAME_INTERVAL) {{
            ctx.clearRect(0,0,W(),H());
            drawGrid();
            drawVolume();
            drawCandles();
            drawMA(ma20, '#0074d9');
            drawMA(ma50, '#b10dc9');
            drawBollinger(boll, '#39cccc', '#ffdc00');
            drawLine();
            drawMACD();
            // Animate: shift candles and line left, add new
            if (t++ % 10 === 0) {{ // update less frequently
                candles.shift();
                let last = candles[candles.length-1];
                let open = last.close;
                let close_ = open + (Math.random()-0.5)*H()/30;
                let high_ = Math.max(open, close_) + Math.random()*10;
                let low_ = Math.min(open, close_) - Math.random()*10;
                candles.push({{open: open, close: close_, high: high_, low: low_}});
                volumes.shift();
                volumes.push(40 + Math.random()*60 + Math.abs(close_-open)*2);
                let closes = candles.map(c=>c.close);
                ma20 = calcMA(closes, 20);
                ma50 = calcMA(closes, 50);
                boll = calcBollinger(closes, 20, 2);
                macdObj = calcMACD(closes);
                macdLine = macdObj.macd;
                signalLine = macdObj.signal;
                macdHist = macdObj.hist;
            }}
            lastFrame = now;
        }}
        requestAnimationFrame(animate);
    }}
    animate();
    // --- END OPTIMIZED ---
    </script>
</body>
</html>
"""
    return html
